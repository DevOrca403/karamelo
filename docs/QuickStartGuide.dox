/** \page GettingStarted Getting started


This is a very short guide on how to get started with <b>Karamelo</b>.

\section GettingStartedInstallation How to install Karamelo?

In order to use <b>Karamelo</b>, you need to download, extract and compile <b>Karamelo</b>'s source code. Compiling is no that complicated thanks to the use of CMake (<a href="https://cmake.org/">cmake.org</a>). It will automatically check for most dependencies, but unfortunately not all of them.

\subsection Dependencies Dependencies
<b>Karamelo</b> has a few dependencies that need to be satisfied for it to successfully compile and run. They are:
 <ul>
  <li><a href="https://cmake.org/">Cmake</a></li>
  <li>MPI. It was tested with OpenMPI</li>
  <li><a href=http://eigen.tuxfamily.org/index.php?title=Main_Page>Eigen</a> version 3 </li>
  <li><a href=http://www.boost.org/>Boost</a> which can be easily installed with the package manager of every Linux distribution.</li>
  <li>Python 3 with <a href=https://matplotlib.org/>Matplotlib</a></li>
  <li><a href=https://github.com/lava/matplotlib-cpp>matplotlib-cpp</a> which allows the use of the Matplotlib library directly from C++.</li>\n
<b>Remark</b>: a bug was detected that prevent versions of matplotlib-cpp earlier than <I>f4ad842e</I> to be used with Karamelo.
  <li><a href=https://www.cs.unc.edu/Research/compgeom/gzstream/>gzstream</a> which is used to compress dump files.</li>
</ul> 

\subsection InstallUbuntu Installing Karamelo on Ubuntu
The authors, as many researchers that do simulation work use Linux, and Ubuntu in particular. In order to make it simple for people like us to install and run Karamelo on Ubuntu, here are the steps to follow to download, build, and run the last version of the code. The following steps were tested using the versions 18.04 LTS and 16.04 LTS.

<ol>
  <li>Install all the dependencies shipped with ubuntu:</li>
  \code sudo apt install make gcc g++ libz-dev cmake libopenmpi-dev libeigen3-dev libboost-dev python-dev python-matplotlib\endcode
  <li>Download and install the extra external dependencies:</li>
    <ol>
      <li>Matplotlib-cpp:</li>
      \code git clone https://github.com/lava/matplotlib-cpp.git \endcode
      Matplotlib-cpp being just a collection of headers, there is nothing to compile. However, one needs to celect the right commit that allows karamelo to run without problems. More recent commits have been found to be buggy:
      \code cd matplotlib-cpp/
 git checkout f4ad842e\endcode
      <li>Download gzstream and compile it.</li>
    </ol>
  <li>Add the path to Eigen, gzstream and matplotlib to your paths:</li>
Add to your .bash_profile:
\code CPATH=$CPATH:/usr/include/eigen3:/home/toto/gzstream:/home/toto/matplotlib-cpp:/usr/include/python2.7
 export CPATH

 LIBRARY_PATH=$LIBRARY_PATH:/usr/include/eigen3:/home/toto/gzstream:/home/toto/matplotlib-cpp:/usr/include/python2.7
 export LIBRARY_PATH\endcode

 <b>Remark</b>: change /home/toto/ to the path to the root directory where you have installed gzstream and matplotlib-cpp (they can be different from each other).
<li>Download and install Karamelo:</li>

\code
git clone https://github.com/adevaucorbeil/karamelo.git
cd ~/karamelo
cmake -DCMAKE_BUILD_TYPE=release build .
make
\endcode

<li>Enjoy!</li>
</ol>



\section GettingStartedFirstExample A simple first example

Here is a simple example of two disks bouncing onto each other to get you started with <b>Karamelo</b>.

\subsection ExampleSetup Setup

This example involves two elastic disks launched at a speed 0.1 mm/s towards each other:

\image html two-disks.png

\subsection ExampleInputFile Input file

In order to simulate this problem, we need to create an input file that we called two-disks.mpm which reads:

\include two-disks.mpm

\subsection RunningExample Running

In order to run this example, on 4 CPUs, for instance, simply execute the following command:
\code
NUM_CPU = 4
mpirun -np ${NUM_CPU} /path/to/karamelo/directory/karamelo -i two-disks.mpm
\endcode

Of course, you can change the number of CPU by adjusting the variable NUM_CPU.

\subsection Results Results

This example generates three types of results:
<ol>
<li>A log file called log.mpm</li>\n
The data displayed in this file are specified by the command:
\code
log_modify(custom, step, dt, time, Ek_s, Es_s)
\endcode
Therefore, here they are, in order: the step (step), the timestep (dt), the overall time (time), the total kinetic energy (Ek_s) and the total strain energy (Es_s)
<li>Two series of dump files called dump_p.*.LAMMPS and dump_g.*.LAMMPS to be visualized with <a href=http://www.ovito.org>Ovito</a>. The first series contains particles data, the second, grid nodes data. They are generated by the following commands:</li>\n
\code
dump(dump1, all, particle, dumping_interval, dump_p.*.LAMMPS, x, y, z)
dump(dump2, all, grid, dumping_interval, dump_g.*.LAMMPS, x, y, z)
\endcode
<li>A plot of the kinetic, strain, and total energies, saved as "plot.pdf". This is obtained with the following commands:</li>\n
\code
plot(Ek, N_log, time, Ek_s)
plot(Es, N_log, time, Es_s)
plot(Etot, N_log, time, Etot)
save_plot(plot.pdf)
\endcode
</ol>
*/