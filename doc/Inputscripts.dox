/*! \page InputScripts Input scripts

<b>Karamelo</b> executes by reading commands from a input script (a text file), one line at a time. When the input script ends, <b>Karamelo</b> exits. Each command causes <b>Karamelo</b> to take some action. It may set a variable, read in a file, or run a simulation. The syntax used is easy and flexible. One can for example intuitively add new variables that can be constant:
\code
E = 211
\endcode
or depend on internal variables such as time – using the time variable – or the particle positions – using the x, y or z
variables:
\code
T = 1
r = sqrt(x*x+y*y)
g = sin(PI*time/T)
\endcode
The list of internal variable to date are:
<table>
<caption id="multi_row">Internal variables</caption>
<tr><th>Variable       <th>Description
<tr><td>x0             <td>Particle or node position in the x direction in the reference state.
<tr><td>y0             <td>Particle or node position in the y direction in the reference state.
<tr><td>z0             <td>Particle or node position in the z direction in the reference state.
<tr><td>x              <td>Current particle or node position in the x direction.
<tr><td>y              <td>Current particle or node position in the y direction.
<tr><td>z              <td>Current particle or node position in the z direction.
<tr><td>time           <td>Current simulation time.
<tr><td>timestep       <td>Current time step.
<tr><td>dt             <td>Current timestep, i.e. \f$\Delta t\f$.
<tr><td>PI             <td>Number \f$\pi\f$.
</table>

Everything else is controlled through functions. For instance, the global dimensionality of the simulation, the domain’s
size, and the background grid cell size are set by the dimension() command, for example:
\code
dimension(2, xlo, xhi, ylo, yhi, cellsize)
\endcode



Just like with programming languages, ordering of commands in an input script can be important. The following rules apply:
<ol>
<li><b>Karamelo</b> does not read your entire input script and then perform a simulation with all the settings. Rather, the input script is read one line at a time and each command takes effect when it is read. Thus this sequence of commands:</li>\n
\code
set_dt(0.001)
run(100)
run(100)
\endcode

does something different than:

\code
run(100)
set_dt(0.001)
run(100)
\endcode

In the first case, the specified timestep (0.001) is used for two simulations of 100 timesteps each. In the 2nd case, the timestep corresponding to the CFL condition is used for the 1st 100 step simulation and a 0.001 timestep is used for the 2nd one.

<li>A user variable cannot be used before it's defined. Therefore this code</li>\n
\code
E = 2 * a
\endcode
returns
\code
Error at line 1: Error: a is unknown.
\endcode

<li>All characters from the first '#' character onward are treated as comment and discarded. Example:</li>
\code
# This is a comment
dt_factor(0.1)  # This is another comment
\endcode
</ol>

But don't worry too much as many input script errors are detected by <b>Karamelo</b> and an ERROR or WARNING message is printed.
*/